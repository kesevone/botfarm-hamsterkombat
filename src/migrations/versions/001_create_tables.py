"""create_tables

Revision ID: 001
Revises: 
Create Date: 2024-08-17 15:37:11.443262

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "001"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("max_accounts", sa.Integer(), server_default="0", nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "accounts",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column("full_name", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("photos", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("referrals_count", sa.Integer(), nullable=True),
        sa.Column("level", sa.Integer(), nullable=True),
        sa.Column("total_coins", sa.Float(), nullable=True),
        sa.Column("balance_coins", sa.Float(), nullable=True),
        sa.Column("available_taps", sa.Integer(), nullable=True),
        sa.Column("max_taps", sa.Integer(), nullable=True),
        sa.Column("earn_per_tap", sa.Integer(), nullable=True),
        sa.Column("earn_passive_per_sec", sa.Float(), nullable=True),
        sa.Column("earn_passive_per_hour", sa.Float(), nullable=True),
        sa.Column("last_passive_earn", sa.Float(), nullable=True),
        sa.Column("taps_recover_per_sec", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_boosts",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("desc", sa.String(), nullable=True),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("cooldown_seconds", sa.Integer(), nullable=False),
        sa.Column("earn_per_tap", sa.Integer(), nullable=False),
        sa.Column("earn_per_tap_delta", sa.Integer(), nullable=False),
        sa.Column("max_taps", sa.Integer(), nullable=False),
        sa.Column("max_taps_delta", sa.Integer(), nullable=False),
        sa.Column(
            "last_upgrade_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_ciphers",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("bonus_coins", sa.Integer(), server_default="0", nullable=True),
        sa.Column("cipher", sa.String(), nullable=True),
        sa.Column("is_claimed", sa.Boolean(), server_default=sa.text("false"), nullable=True),
        sa.Column("remain_seconds", sa.Integer(), server_default="0", nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_configs",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("autofarm_interval", sa.Integer(), server_default="1800", nullable=True),
        sa.Column(
            "is_autofarm_notifications",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=True,
        ),
        sa.Column("autoupgrade_interval", sa.Integer(), server_default="300", nullable=True),
        sa.Column("autoupgrade_limit", sa.Integer(), server_default="0", nullable=True),
        sa.Column("limit_percent", sa.Integer(), server_default="0", nullable=True),
        sa.Column(
            "is_autoupgrade_notifications",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=True,
        ),
        sa.Column("autosync_interval", sa.Integer(), server_default="3600", nullable=True),
        sa.Column(
            "is_autosync_notifications",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=True,
        ),
        sa.Column("is_autofarm", sa.Boolean(), server_default=sa.text("false"), nullable=True),
        sa.Column("is_autoupgrade", sa.Boolean(), server_default=sa.text("false"), nullable=True),
        sa.Column("is_autosync", sa.Boolean(), server_default=sa.text("true"), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("true"), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_tasks",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("reward_coins", sa.Integer(), nullable=True),
        sa.Column("days", sa.Integer(), nullable=True),
        sa.Column(
            "periodicity", sa.Enum("ONCE", "REPEATEDLY", name="taskperiodicity"), nullable=True
        ),
        sa.Column("is_completed", sa.Boolean(), server_default=sa.text("false"), nullable=True),
        sa.Column("completed_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_upgrades",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("condition_id", sa.BigInteger(), nullable=True),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("profit_per_hour", sa.Float(), nullable=False),
        sa.Column("cooldown_seconds", sa.Integer(), server_default="0", nullable=True),
        sa.Column("is_expired", sa.Boolean(), server_default=sa.text("false"), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("true"), nullable=True),
        sa.Column(
            "last_upgrade_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["condition_id"], ["account_upgrades.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "airdrop_tasks",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_proxies",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("config_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "protocol", sa.Enum("HTTP", "SOCKS4", "SOCKS5", name="proxyprotocol"), nullable=False
        ),
        sa.Column("host", sa.String(), nullable=False),
        sa.Column("port", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("timeout", sa.Integer(), server_default="0", nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["config_id"], ["account_configs.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("account_proxies")
    op.drop_table("airdrop_tasks")
    op.drop_table("account_upgrades")
    op.drop_table("account_tasks")
    op.drop_table("account_configs")
    op.drop_table("account_ciphers")
    op.drop_table("account_boosts")
    op.drop_table("accounts")
    op.drop_table("users")
    # ### end Alembic commands ###
