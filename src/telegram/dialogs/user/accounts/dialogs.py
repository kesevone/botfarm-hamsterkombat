from aiogram.enums import ContentType
from aiogram_dialog import Dialog, ShowMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import (
    Button,
    Group,
    Radio,
    ScrollingGroup,
    Select,
    SwitchTo,
    Url,
)
from aiogram_dialog.widgets.text import Const, Format, Jinja
from magic_filter import F

from src.enums import AuthType
from src.telegram.dialogs import states
from src.telegram.dialogs.common.texts import BACK_BUTTON_TEXT
from src.telegram.dialogs.common.widgets import (
    BACK_DIALOG_BUTTON,
    BACK_WINDOW_BUTTON,
    CUSTOM_SCROLL_BTNS,
    ID_SCROLL_NO_PAGER,
)
from src.telegram.dialogs.user.accounts import getters, handlers
from src.telegram.dialogs.user.configs.handlers import (
    on_start_account_config_dialog,
)

account_creator_dialog = Dialog(
    Window(
        Jinja(
            """
‚û°Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ</b> —á–µ—Ä–µ–∑ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å</b> –∞–∫–∫–∞—É–Ω—Ç:
            """
        ),
        Group(
            Button(
                Const("üîë Bearer –¢–æ–∫–µ–Ω"),
                id=AuthType.BEARER,
                on_click=handlers.on_switch_to_input_proxy_data,
            ),
            Button(
                Const("üåê WebApp –¥–∞–Ω–Ω—ã–µ"),
                id=AuthType.WEBAPP_DATA,
                on_click=handlers.on_switch_to_input_proxy_data,
            ),
            Button(
                Const("üì≤ –¢–µ–ª–µ–≥—Ä–∞–º –°–µ—Å—Å–∏—è"),
                id=AuthType.SESSION,
                on_click=handlers.on_switch_to_input_proxy_data,
            ),
            width=2,
        ),
        Url(
            Const("üìù –ß–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
            Const("https://telegra.ph/Hamster-Fucker--Tutorial-06-08"),
        ),
        BACK_DIALOG_BUTTON,
        state=states.AccountCreatorDialog.SELECT_AUTH_TYPE,
    ),
    Window(
        Jinja(
            """
‚û°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>–ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ñ–µ—Ä–º—É:

–ù–µ–æ–±—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: <code>protocol://username:password@host:port</code>
            """
        ),
        MessageInput(handlers.on_switch_to_auth_type),
        SwitchTo(
            Const(BACK_BUTTON_TEXT),
            id="back_to_select_auth_type",
            state=states.AccountCreatorDialog.SELECT_AUTH_TYPE,
        ),
        state=states.AccountCreatorDialog.INPUT_PROXY_DATA,
    ),
    Window(
        Jinja(
            """
üîë –í—Å—Ç–∞–≤—å—Ç–µ <b>Bearer —Ç–æ–∫–µ–Ω</b>, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —É –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ <b>Hamster Kombat</b>.

–û—Ç–∫—Ä–æ–π—Ç–µ <b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</b> –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.
"""
        ),
        MessageInput(handlers.on_auth_with_webapp_or_bearer_data),
        SwitchTo(
            Const(BACK_BUTTON_TEXT),
            id="back_to_select_auth_type",
            state=states.AccountCreatorDialog.SELECT_AUTH_TYPE,
        ),
        state=states.AccountCreatorDialog.BEARER_TOKEN,
    ),
    Window(
        Jinja(
            """
üåê –í—Å—Ç–∞–≤—å—Ç–µ <b>–¥–∞–Ω–Ω—ã–µ WebApp</b>, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ <b>—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏</b>:

‚ö†Ô∏è –î–∞–Ω–Ω—ã–π <b>—Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b> –Ω–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω.

–û—Ç–∫—Ä–æ–π—Ç–µ <b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</b> –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.
"""
        ),
        MessageInput(handlers.on_auth_with_webapp_or_bearer_data),
        SwitchTo(
            Const(BACK_BUTTON_TEXT),
            id="back_to_select_auth_type",
            state=states.AccountCreatorDialog.SELECT_AUTH_TYPE,
        ),
        state=states.AccountCreatorDialog.WEBAPP_DATA,
    ),
    Window(
        Jinja(
            """
üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–æ–º <b>{ .session }</b>, –Ω–∞—à –±–æ—Ç <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è</b> –≤ Hamster Kombat –∏ –ø–æ–ª—É—á–∏—Ç <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ</b>.

–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º <b>–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ</b>, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç, <b>—Å–æ—Ö—Ä–∞–Ω—è—è –≤ –ø–∞–º—è—Ç—å</b>.
"""
        ),
        MessageInput(handlers.on_auth_with_session, content_types=ContentType.DOCUMENT),
        SwitchTo(
            Const(BACK_BUTTON_TEXT),
            id="back_to_select_auth_type",
            state=states.AccountCreatorDialog.SELECT_AUTH_TYPE,
        ),
        state=states.AccountCreatorDialog.SESSION,
    ),
)

account_dialog = Dialog(
    Window(
        Jinja(
            """
üêπ <b>–•–æ–º—è—á–æ–∫</b> {{ account.full_name }} (<code>{{ account.id }}</code>)
‚îú <b>–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {{ account.referalls_count or 0 }}
‚îú <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{{ account.level }}</code>
‚îú <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{{ "{:,}".format(account.balance_coins | int) }}</code>
‚îú <b>–ú–æ–Ω–µ—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> <code>{{ "{:,}".format(account.total_coins | int) }}</code>
‚îú <b>–ú–æ–Ω–µ—Ç –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø:</b> <code>{{ account.earn_per_tap }}</code>
‚îî <b>–ö–æ–ª-–≤–æ —Ç–∞–ø–æ–≤, –≤–æ—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö –≤ —Å–µ–∫—É–Ω–¥—É:</b> <code>{{ account.taps_recover_per_sec }}</code>

üëÜ <b>–¢–∞–ø—ã</b>
‚îú <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{{ "{:,}".format(account.available_taps | int) }}</code>
‚îî <b>–ú–∞–∫—Å–∏–º—É–º:</b> <code>{{ "{:,}".format(account.max_taps | int) }}</code>

üí∏ <b>–î–æ—Ö–æ–¥ –º–æ–Ω–µ—Ç</b>
‚îú <b>–í –º–∏–Ω—É—Ç—É:</b> <code>{{ "{:,}".format((account.earn_passive_per_sec * 60) | int) }}</code>
‚îú <b>–í —á–∞—Å:</b> <code>{{ "{:,}".format(account.earn_passive_per_hour | int) }}</code>
‚îî <b>–í –¥–µ–Ω—å:</b> <code>{{ "{:,}".format((account.earn_passive_per_hour * 24) | int) }}</code>

{% if daily_task %}
üìÜ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞</b>
‚îú <b>–î–µ–Ω—å:</b> <code>{{ daily_task.days }}</code> 
‚îú <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> <code>{{ "{:,}".format(daily_task.reward_coins | int) }}</code>
‚îî <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{{ '–ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å' if not daily_task.is_completed else '–°–æ–±—Ä–∞–Ω–∞' }}</code>
{% else %}
üìÜ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞</b>
‚îî <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</code>
{% endif %}

{% if cipher %}
üìù <b>–ê–∑–±—É–∫–∞ –ú–æ—Ä–∑–µ</b>
‚îú <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> <code>{{ "{:,}".format(cipher.bonus_coins | int) }}</code>
‚îú <b>–®–∏—Ñ—Ä:</b> <code>{{ cipher.cipher }}</code>
‚îî <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{{ '–ú–æ–∂–Ω–æ —Ä–∞–∑–≥–∞–¥–∞—Ç—å' if not cipher.is_claimed else '–†–∞–∑–≥–∞–¥–∞–Ω' }}</code>
{% else %}
üìù <b>–ê–∑–±—É–∫–∞ –ú–æ—Ä–∑–µ</b>
‚îî <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</code>
{% endif %}
        """
        ),
        Button(
            Const("üëÜ –¢–∞–ø–Ω—É—Ç—å"),
            id="tap",
            when="is_proxy_active",
            on_click=handlers.on_button_tap,
        ),
        Button(
            Const("üìù –†–∞–∑–≥–∞–¥–∞—Ç—å —à–∏—Ñ—Ä"),
            id="cipher",
            when=~F["is_cipher_claimed"] & F["is_proxy_active"],
            on_click=handlers.on_claim_daily_cipher,
        ),
        Button(
            Const("‚≠êÔ∏è –°–æ–±—Ä–∞—Ç—å –∫–æ–º–±–æ"),
            id="combo",
            when=F["is_proxy_active"],
            on_click=handlers.on_claim_daily_combo,
        ),
        Button(
            Const("üí∞ –°–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            id="daily_task",
            when=~F["is_daily_task_completed"] & F["is_proxy_active"],
            on_click=handlers.on_claim_daily_task,
        ),
        Button(
            Const("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–æ–≤–∞—Ç—å"),
            id="sync",
            when="is_proxy_active",
            on_click=handlers.on_button_sync_data,
        ),
        Group(
            Button(
                Const("‚è´ –ë—É—Å—Ç—ã"),
                id="boosts",
                when="is_proxy_active",
                on_click=handlers.on_start_account_boosts_dialog,
            ),
            Button(
                Const("üéä –ê–ø–≥—Ä–µ–π–¥—ã"),
                id="upgrades",
                when="is_proxy_active",
                on_click=handlers.on_start_account_upgrades_dialog,
            ),
            Button(
                Const("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                id="config",
                on_click=on_start_account_config_dialog,
            ),
            width=2,
        ),
        # Url(
        #     Const("üìù –ì–∞–π–¥ –ø–æ —Ñ–µ—Ä–º–µ"),
        #     Const("https://telegra.ph/Hamster-Fucker--Tutorial-06-08"),
        # ),
        Button(
            Const(BACK_BUTTON_TEXT),
            id="cancel",
            on_click=lambda e, w, manager: manager.done(
                show_mode=ShowMode.DELETE_AND_SEND
            ),
        ),
        getter=getters.get_account_data,
        state=states.AccountDialog.INFO,
    )
)


account_boosts_dialog = Dialog(
    Window(
        Jinja("‚è´ –í—ã–±–µ—Ä–∏—Ç–µ <b>–±—É—Å—Ç</b> –¥–ª—è –µ–≥–æ –ø–æ–∫—É–ø–∫–∏:"),
        ScrollingGroup(
            Select(
                Format("{item.name}"),
                id="boosts_selector",
                item_id_getter=lambda x: x.id,
                items="boosts",
                type_factory=int,
                on_click=handlers.on_select_boost_by_id,
            ),
            id=ID_SCROLL_NO_PAGER,
            width=1,
            height=10,
            hide_pager=True,
        ),
        CUSTOM_SCROLL_BTNS,
        Button(
            Const(BACK_BUTTON_TEXT),
            id="cancel",
            on_click=lambda e, w, manager: manager.done(
                show_mode=ShowMode.DELETE_AND_SEND
            ),
        ),
        getter=getters.get_account_boosts,
        state=states.AccountBoostsDialog.SELECT_BOOST,
    ),
    Window(
        Jinja(
            """
üêπ <b>–•–æ–º—è—á–æ–∫</b> {{ boost.account.full_name }} (<code>{{ boost.account.id }}</code>)
‚îú <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{{ "{:,}".format(boost.account.balance_coins | int) }}</code>
‚îú <b>–ú–æ–Ω–µ—Ç –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø:</b> <code>{{ boost.account.earn_per_tap }}</code>

üëÜ <b>–¢–∞–ø—ã</b>
‚îú <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{{ "{:,}".format(boost.account.available_taps | int) }}</code>
‚îî <b>–ú–∞–∫—Å–∏–º—É–º:</b> <code>{{ "{:,}".format(boost.account.max_taps | int) }}</code>

‚è´ <b>–ë—É—Å—Ç {{ boost.name }}</b> (<code>{{ boost.type }}</code>)
{% if boost.type == "BoostMaxTaps" %}
‚îú <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{{ boost.level }}</code>
‚îú <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{{ boost.price | round(1) }}</code>
‚îî <b>–ú–∞–∫—Å–∏–º—É–º —Ç–∞–ø–æ–≤:</b> +<code>{{ boost.max_taps_delta }}</code>
{% elif boost.type == "BoostEarnPerTap" %}
‚îú <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{{ boost.level }}</code>
‚îú <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{{ boost.price | round(1) }}</code>
‚îî <b>–ú–æ–Ω–µ—Ç –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø:</b> +<code>{{ boost.earn_per_tap_delta }}</code>
{% elif boost.type == "BoostFullAvailableTaps" %}
{% if boost.cooldown_seconds > 0 %}
‚îú <b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> <code>{{ boost.cooldown_seconds }}</code> —Å–µ–∫.
{% endif %}
‚îú <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{{ boost.level }}</code>
‚îî <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{{ boost.price | round(1) }}</code>
{% else %}
{% if boost.cooldown_seconds > 0 %}
‚îú <b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> <code>{{ boost.cooldown_seconds }}</code> —Å–µ–∫.
{% endif %}
‚îú <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{{ boost.level }}</code>
‚îî <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{{ boost.price | round(1) }}</code>
{% endif %}

{% if boost.desc %}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{{ boost.desc }}</code>
{% endif %}
            """
        ),
        Button(
            Const("üí∞ –ö—É–ø–∏—Ç—å –±—É—Å—Ç"),
            id="buy_boost",
            when="is_active",
            on_click=handlers.on_button_buy_boost,
        ),
        BACK_WINDOW_BUTTON,
        getter=getters.get_boost_data,
        state=states.AccountBoostsDialog.INFO,
    ),
)


account_upgrades_dialog = Dialog(
    Window(
        Jinja("üéä –í—ã–±–µ—Ä–∏—Ç–µ <b>–∞–ø–≥—Ä–µ–π–¥</b> –¥–ª—è –µ–≥–æ –ø–æ–∫—É–ø–∫–∏:"),
        Radio(
            Format("‚òëÔ∏è {item}"),
            Format("‚ö™Ô∏è {item}"),
            id="sections_selector",
            item_id_getter=lambda x: x,
            items=["Markets", "PR&Team", "Legal", "Specials"],
            type_factory=str,
            on_click=handlers.on_select_upgrade_section,
        ),
        Button(
            Const("üí∞ –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç–Ω—ã–µ"),
            id="profit_upgrades",
            on_click=handlers.on_button_buy_profit_upgrades,
        ),
        ScrollingGroup(
            Select(
                Format("{item.name}"),
                id="upgrades_selector",
                item_id_getter=lambda x: x.id,
                items="upgrades",
                type_factory=int,
                on_click=handlers.on_select_upgrade_by_id,
            ),
            id=ID_SCROLL_NO_PAGER,
            width=2,
            height=10,
            hide_pager=True,
        ),
        CUSTOM_SCROLL_BTNS,
        Button(
            Const(BACK_BUTTON_TEXT),
            id="cancel",
            on_click=lambda e, w, manager: manager.done(
                show_mode=ShowMode.DELETE_AND_SEND
            ),
        ),
        getter=getters.get_account_upgrades,
        state=states.AccountUpgradesDialog.SELECT_UPGRADE,
    ),
)


account_upgrade_dialog = Dialog(
    Window(
        Jinja(
            """
üêπ <b>–•–æ–º—è—á–æ–∫</b> {{ upgrade.account.full_name }} (<code>{{ upgrade.account.id }}</code>)
‚îî <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{{ "{:,}".format(upgrade.account.balance_coins | int) }}</code>

üí∏ <b>–î–æ—Ö–æ–¥ –º–æ–Ω–µ—Ç</b>
‚îú <b>–í –º–∏–Ω—É—Ç—É:</b> <code>{{ "{:,}".format((upgrade.account.earn_passive_per_sec * 60) | int) }}</code>
‚îú <b>–í —á–∞—Å:</b> <code>{{ "{:,}".format(upgrade.account.earn_passive_per_hour | int) }}</code>
‚îî <b>–í –¥–µ–Ω—å:</b> <code>{{ "{:,}".format((upgrade.account.earn_passive_per_hour * 24) | int) }}</code>

üéä <b>–ê–ø–≥—Ä–µ–π–¥ {{ upgrade.name }}</b> (<code>{{ upgrade.type }}</code>)
{% if upgrade.cooldown_seconds > 0 %}
‚îú <b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> <code>{{ upgrade.cooldown_seconds }}</code> —Å–µ–∫.
{% endif %}
‚îú <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{{ upgrade.level }}</code>
{% if condition %}
‚îú <b>–ó–∞–≤–∏—Å–∏—Ç –æ—Ç:</b> <b>{{ condition.name }}</b> (<code>{{ condition.type }}</code>)
{% endif %}
‚îú <b>–†–∞–∑–¥–µ–ª:</b> <code>{{ upgrade.section }}</code>
‚îú <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{{ "{:,}".format(upgrade.price | int) }}</code>
‚îú <b>–ú–æ–Ω–µ—Ç –∑–∞ –æ–¥–∏–Ω —á–∞—Å:</b> +<code>{{ "{:,}".format(upgrade.profit_per_hour | int) }}</code>
‚îî <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{{ '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏' if is_active else '‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏' }}</code>
            """
        ),
        Button(
            Const("üí∞ –ö—É–ø–∏—Ç—å –∞–ø–≥—Ä–µ–π–¥"),
            id="buy_upgrade",
            when="is_active",
            on_click=handlers.on_button_buy_upgrade,
        ),
        Button(
            Const("üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–π –∞–ø–≥—Ä–µ–π–¥"),
            id="open_condition",
            when="condition",
            on_click=handlers.on_start_upgrade_condition_dialog,
        ),
        Button(
            Const(BACK_BUTTON_TEXT),
            id="cancel",
            on_click=lambda e, w, manager: manager.done(
                show_mode=ShowMode.DELETE_AND_SEND
            ),
        ),
        getter=getters.get_upgrade_data,
        state=states.AccountUpgradeDialog.INFO,
    ),
)
