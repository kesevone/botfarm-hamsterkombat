from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Group, Radio, SwitchTo
from aiogram_dialog.widgets.text import Case, Const, Format, Jinja

from src.telegram.dialogs import states
from src.telegram.dialogs.common.texts import BACK_BUTTON_TEXT
from src.telegram.dialogs.common.widgets import BACK_DIALOG_BUTTON, BACK_WINDOW_BUTTON
from src.telegram.dialogs.user.configs import getters, handlers
from src.telegram.dialogs.user.configs.handlers import on_button_unlink_account

account_configs_dialog = Dialog(
    Window(
        Jinja(
            """
‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é <b>—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Å–µ—Ö</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤!

<b>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è</b>, –∫–æ—Ç–æ—Ä—ã–µ –∑–¥–µ—Å—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è <b>–Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö</b>.
            """
        ),
        Group(
            Button(
                Const("üí∞ –°–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
                id="claim_daily_reward",
                on_click=handlers.on_button_claim_daily_reward_all,
            ),
            width=2,
        ),
        BACK_DIALOG_BUTTON,
        getter=getters.get_account_configs,
        state=states.AccountConfigsDialog.SELECT_CONFIG,
    )
)


account_config_dialog = Dialog(
    Window(
        Jinja(
            """
‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ <b>–º–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫</b> –¥–ª—è –µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º:

‚õè <b>–ê–≤—Ç–æ-—Ñ–∞—Ä–º</b>
‚îú <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> <code>{{ '–î–∞' if is_autofarm else '–ù–µ—Ç' }}</code>
‚îî <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>{{ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if not next_run_autofarm else next_run_autofarm }}</code>

üéä <b>–ê–≤—Ç–æ-–∞–ø–≥—Ä–µ–π–¥</b>
‚îú <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> <code>{{ '–î–∞' if is_autoupgrade else '–ù–µ—Ç' }}</code>
‚îî <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>{{ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if not next_run_autoupgrade else next_run_autoupgrade }}</code>

üîÑ <b>–ê–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>
‚îú <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> <code>{{ '–î–∞' if is_autosync else '–ù–µ—Ç' }}</code>
‚îî <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>{{ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if not next_run_autosync else next_run_autosync }}</code>

üåê <b>–ü—Ä–æ–∫—Å–∏</b>
{% if proxy is none or not proxy.is_active %}
‚îî ‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å <b>–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏</b>.
{% else %}
‚îî ‚úÖ <b>–ü—Ä–æ–∫—Å–∏ –≤–∞–ª–∏–¥–Ω—ã–µ</b>.
{% endif %}
            """
        ),
        Group(
            Button(
                Const("‚õè –ê–≤—Ç–æ-—Ñ–∞—Ä–º"),
                id="start_autofarm",
                on_click=handlers.on_start_account_config_autofarm_dialog,
            ),
            Button(
                Const("üéä –ê–≤—Ç–æ-–∞–ø–≥—Ä–µ–π–¥"),
                id="start_autoupgrade",
                on_click=handlers.on_start_account_config_autoupgrade_dialog,
            ),
            Button(
                Const("üîÑ –ê–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
                id="start_autosync",
                on_click=handlers.on_start_account_config_autosync_dialog,
            ),
            Button(
                Const("üåê –ü—Ä–æ–∫—Å–∏"),
                id="start_proxy",
                on_click=handlers.on_start_account_config_proxy_dialog,
            ),
            width=2,
        ),
        Button(
            Const("‚ûñ –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
            id="unlink",
            on_click=on_button_unlink_account,
        ),
        BACK_DIALOG_BUTTON,
        getter=getters.get_account_config,
        state=states.AccountConfigDialog.INFO,
    ),
    Window(
        Jinja(
            """
üéä –í—ã –º–æ–∂–µ—Ç–µ <b>–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ</b>, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–ø–≥—Ä–µ–π–¥–æ–≤ <b>(–∞–≤—Ç–æ-–∞–ø–≥—Ä–µ–π–¥)</b>.

<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{{ "{:,}".format(account.balance_coins | int) }}</code>
<b>–ë—É–¥–µ—Ç –∑–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –∞–ø–≥—Ä–µ–π–¥:</b> <code>{{ "{:,}".format(autoupgrade_limit | int) }}</code>
            """
        ),
        Radio(
            Format("‚òëÔ∏è {item}%"),
            Format("‚ö™Ô∏è {item}%"),
            id="autoupgrade_limit",
            item_id_getter=lambda x: x,
            items=["0", "25", "50", "75", "100"],
            type_factory=int,
            on_click=handlers.on_button_set_autoupgrade_limit,
        ),
        BACK_WINDOW_BUTTON,
        getter=getters.get_account_config,
        state=states.AccountConfigDialog.AUTOUPGRADE_LIMIT,
    ),
)


account_autofarm_config_dialog = Dialog(
    Window(
        Jinja(
            """
‚õè <b>–ê–≤—Ç–æ-—Ñ–∞—Ä–º</b>
‚îú <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> <code>{{ '–î–∞' if is_autofarm else '–ù–µ—Ç' }}</code>
‚îú <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> <code>{{ '–î–∞' if is_autofarm_notifications else '–ù–µ—Ç' }}</code>
‚îú <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞:</b> <code>{{ "{:,}".format((config.autofarm_interval // 60) | int) }}</code> –º–∏–Ω.
‚îî <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>{{ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if not next_run_autofarm else next_run_autofarm }}</code>
            """
        ),
        Group(
            Button(
                Case(
                    {
                        None: Const("‚ö†Ô∏è"),
                        True: Const("üîî"),
                        False: Const("üîï"),
                    },
                    selector="is_autofarm_notifications",
                ),
                id="autofarm_notifications",
                on_click=handlers.on_button_set_any_notifications,
            ),
            Button(
                Case(
                    {
                        None: Const("‚ö†Ô∏è –û—à–∏–±–∫–∞"),
                        True: Const("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"),
                        False: Const("‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω:"),
                    },
                    selector="is_autofarm",
                ),
                id="autofarm",
                on_click=handlers.on_button_set_autofarm,
            ),
            when="is_proxy_active",
            width=2,
        ),
        BACK_DIALOG_BUTTON,
        getter=getters.get_account_config,
        state=states.AccountConfigAutofarmDialog.INFO,
    )
)


account_autoupgrade_config_dialog = Dialog(
    Window(
        Jinja(
            """
üéä <b>–ê–≤—Ç–æ-–∞–ø–≥—Ä–µ–π–¥</b>
‚îú <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> <code>{{ '–î–∞' if is_autoupgrade else '–ù–µ—Ç' }}</code>
‚îú <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> <code>{{ '–î–∞' if is_autoupgrade_notifications else '–ù–µ—Ç' }}</code>
‚îú <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞:</b> <code>{{ "{:,}".format((config.autoupgrade_interval // 60) | int) }}</code> –º–∏–Ω.
‚îî <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>{{ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if not next_run_autoupgrade else next_run_autoupgrade }}</code>

{% if profit_upgrades %}
üí∞<b>–ü—Ä–æ—Ñ–∏—Ç–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã:</b>
{% for upgrade in profit_upgrades %}
‚Ä¢ <code>{{ upgrade.type }}</code> | <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{{ "{:,}".format(upgrade.price | int) }}</code> | –î–æ –æ–∫—É–ø–∞: <code>{{ upgrade.profit_per_time | round(2) }}</code> —á.
{% endfor %}
{% endif %}
            """
        ),
        Group(
            Button(
                Case(
                    {
                        None: Const("‚ö†Ô∏è"),
                        True: Const("üîî"),
                        False: Const("üîï"),
                    },
                    selector="is_autoupgrade_notifications",
                ),
                id="autoupgrade_notifications",
                on_click=handlers.on_button_set_any_notifications,
            ),
            Button(
                Case(
                    {
                        None: Const("‚ö†Ô∏è –û—à–∏–±–∫–∞"),
                        True: Const("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"),
                        False: Const("‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"),
                    },
                    selector="is_autoupgrade",
                ),
                id="autoupgrade",
                on_click=handlers.on_button_set_autoupgrade,
            ),
            when="is_proxy_active",
            width=2,
        ),
        BACK_DIALOG_BUTTON,
        getter=getters.get_account_config,
        state=states.AccountConfigAutoupgradeDialog.INFO,
    )
)


account_autosync_config_dialog = Dialog(
    Window(
        Jinja(
            """
üîÑ <b>–ê–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>
‚îú <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> <code>{{ '–î–∞' if is_autosync else '–ù–µ—Ç' }}</code>
‚îú <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> <code>{{ '–î–∞' if is_autosync_notifications else '–ù–µ—Ç' }}</code>
‚îú <b>–ë—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑:</b> <code>{{ "{:,}".format((config.autosync_interval // 60) | int) }}</code> –º–∏–Ω.
‚îî <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>{{ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if not next_run_autosync else next_run_autosync }}</code>
            """
        ),
        Group(
            Button(
                Case(
                    {
                        None: Const("‚ö†Ô∏è"),
                        True: Const("üîî"),
                        False: Const("üîï"),
                    },
                    selector="is_autosync_notifications",
                ),
                id="autosync_notifications",
                on_click=handlers.on_button_set_any_notifications,
            ),
            Button(
                Case(
                    {
                        None: Const("‚ö†Ô∏è –û—à–∏–±–∫–∞"),
                        True: Const("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"),
                        False: Const("‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"),
                    },
                    selector="is_autosync",
                ),
                id="autosync",
                on_click=handlers.on_button_set_autosync,
            ),
            when="is_proxy_active",
            width=2,
        ),
        BACK_DIALOG_BUTTON,
        getter=getters.get_account_config,
        state=states.AccountConfigAutosyncDialog.INFO,
    )
)


account_proxy_config_dialog = Dialog(
    Window(
        Jinja(
            """
üåê <b>–ü—Ä–æ–∫—Å–∏</b>
{% if proxy is none %}
‚îî ‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏</b>, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∏—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
{% else %}
‚îú <b>URL</b>: <code>{{ proxy.url }}</code>
‚îú <b>–ü—Ä–æ—Ç–æ–∫–æ–ª:</b> <code>{{ proxy.protocol }}</code>
‚îú <b>–•–æ—Å—Ç:</b> <code>{{ proxy.host }}</code>
‚îú <b>–ü–æ—Ä—Ç:</b> <code>{{ proxy.port }}</code>
‚îú <b>–õ–æ–≥–∏–Ω:</b> <code>{{ proxy.username }}</code>
‚îú <b>–ü–∞—Ä–æ–ª—å:</b> <code>{{ proxy.password }}</code>
‚îú <b>–¢–∞–π–º-–∞—É—Ç:</b> <code>{{ proxy.timeout }}</code> —Å–µ–∫.
{% if not proxy.is_active %}
‚îî ‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å <b>–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏</b>.
{% else %}
‚îî ‚úÖ <b>–ü—Ä–æ–∫—Å–∏ –≤–∞–ª–∏–¥–Ω—ã–µ</b>.
{% endif %}
{% endif %}
            """
        ),
        Group(
            SwitchTo(
                Const("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏"),
                id="set_proxy",
                state=states.AccountConfigProxyDialog.INPUT_PROXY_DATA,
            ),
            SwitchTo(
                Const("üïò –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º-–∞—É—Ç"),
                id="set_timeout",
                state=states.AccountConfigProxyDialog.INPUT_TIMEOUT_SECONDS,
            ),
            Button(
                Const("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"),
                id="check_proxy",
                on_click=handlers.on_button_check_proxy,
            ),
            width=2,
        ),
        BACK_DIALOG_BUTTON,
        getter=getters.get_account_config,
        state=states.AccountConfigProxyDialog.INFO,
    ),
    Window(
        Jinja(
            """
‚û°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–∞–π–º-–∞—É—Ç</b> –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ <b>–ø—Ä–æ–∫—Å–∏</b>:

–ë–æ—Ç –±—É–¥–µ—Ç <b>–ø—ã—Ç–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∫—É–Ω–¥</b> —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–π—Ç—É, –∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç <b>–≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏</b> (–∞–≤—Ç–æ-–∞–ø–≥—Ä–µ–π–¥, –∞–≤—Ç–æ-—Ñ–∞—Ä–º, –∞–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è).
            """
        ),
        MessageInput(handlers.on_input_timeout_seconds),
        SwitchTo(
            Const(BACK_BUTTON_TEXT),
            id="back_to_info",
            state=states.AccountConfigProxyDialog.INFO,
        ),
        state=states.AccountConfigProxyDialog.INPUT_TIMEOUT_SECONDS,
    ),
    Window(
        Jinja(
            """
‚û°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π <b>–ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>:

–ù–µ–æ–±—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: <code>protocol://username:password@host:port</code>
            """
        ),
        MessageInput(handlers.on_input_proxy_data),
        SwitchTo(
            Const(BACK_BUTTON_TEXT),
            id="back_to_info",
            state=states.AccountConfigProxyDialog.INFO,
        ),
        state=states.AccountConfigProxyDialog.INPUT_PROXY_DATA,
    ),
)
